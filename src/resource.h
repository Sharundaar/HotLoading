#pragma once

#include <vector>
#include <string>
#include <set>

#include "basic_types.h"
#include "object.h"
#include "memory_pool.h"

struct Resource;
struct ResourceSource;

struct Resource : public Object
{
    GENERATE_BODY( Resource );

    // source
    ResourceSource* source = nullptr;

    // resource data
    bool loaded = false;
    std::string name;

};

enum class ResourceSourceType
{
    UNKNOWN,
    FILE,
    CODE,
};

struct ResourceSource
{
    std::string source;                 // source name
    std::vector<std::string> errors;    // errors generated by the source
};

void setup_resource( Resource* resource, const char* source_file, const char* name );
void clear_resource( Resource* resource );

ResourceSource* get_source( const char* source, bool add_if_needed = true );

ResourceSource* create_source( MemoryPool<ResourceSource>& pool, const char* source );
ResourceSource* find_source( MemoryPool<ResourceSource>& pool, const char* source );

void remove_resource_from_source( Resource* resource );
void add_resource_to_source( Resource* resource, const char* source_file );
